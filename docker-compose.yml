version: '2.1'

volumes:
  fcrepo:
  solr:
  db:
  redis:
  zk1:
  zkconf:
  app:
  assets:
  cache:

networks:
  internal:

services:
  zoo1:
    image: zookeeper:3.6.2
    container_name: zoo1
    restart: always
    hostname: zoo1
    ports:
      - 2181:2181
      - 7001:7000
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=zoo1:2888:3888;2181 server.2=zoo2:2888:3888;2181 server.3=zoo3:2888:3888;2181
      ZOO_4LW_COMMANDS_WHITELIST: mntr, conf, ruok
      ZOO_CFG_EXTRA: "metricsProvider.className=org.apache.zookeeper.metrics.prometheus.PrometheusMetricsProvider metricsProvider.httpPort=7000 metricsProvider.exportJvmInfo=true"
    networks:
      internal:
        aliases:
          - zookeeper_cluster
    healthcheck:
      test: [ "CMD-SHELL", "echo 'ruok' | nc -w 2 -q 2 localhost 2181 | grep imok || exit 1" ]
      interval: "10s"
      timeout: "8"

  zoo2:
    image: zookeeper:3.6.2
    container_name: zoo2
    restart: always
    hostname: zoo2
    ports:
      - 2182:2181
      - 7002:7000
    environment:
      ZOO_MY_ID: 2
      ZOO_SERVERS: server.1=zoo1:2888:3888;2181 server.2=zoo2:2888:3888;2181 server.3=zoo3:2888:3888;2181
      ZOO_4LW_COMMANDS_WHITELIST: mntr, conf, ruok
      ZOO_CFG_EXTRA: "metricsProvider.className=org.apache.zookeeper.metrics.prometheus.PrometheusMetricsProvider metricsProvider.httpPort=7000 metricsProvider.exportJvmInfo=true"
    networks:
      internal:
        aliases:
          - zookeeper_cluster

  zoo3:
    image: zookeeper:3.6.2
    container_name: zoo3
    restart: always
    hostname: zoo3
    ports:
      - 2183:2181
      - 7003:7000
    environment:
      ZOO_MY_ID: 3
      ZOO_SERVERS: server.1=zoo1:2888:3888;2181 server.2=zoo2:2888:3888;2181 server.3=zoo3:2888:3888;2181
      ZOO_4LW_COMMANDS_WHITELIST: mntr, conf, ruok
      ZOO_CFG_EXTRA: "metricsProvider.className=org.apache.zookeeper.metrics.prometheus.PrometheusMetricsProvider metricsProvider.httpPort=7000 metricsProvider.exportJvmInfo=true"
    networks:
      internal:
        aliases:
          - zookeeper_cluster
  solr:
    image: solr:8.7
    container_name: solr
    command:
      - solr-precreate
    environment:
      - OOM=script
      - VIRTUAL_PORT=8983
    depends_on:
      zoo1:
        condition: service_healthy
    expose:
      - 8983
    ports:
      - 8983:8983
    volumes:
      - .:/app
      - solr:/opt/solr/server/solr
      - .\solr\vault_docker_config:/opt/solr-8.7.0/server/solr/configsets/vault_dev
      # Run these commands to create a core named vault_dev:
      # docker exec --user root solr chown -R solr:solr /opt/solr/server/solr
      # docker exec -d solr solr create_core -c vault_dev -d /opt/solr-8.7.0/server/solr/configsets/vault_dev
    networks:
      internal:

  fcrepo:
    image: cbeer/fcrepo4:4.7
    env_file:
      - .env
    expose:
      - 8080
      - 8984
    ports:
      - 8080:8080
    volumes:
      - fcrepo:/data
    environment:
      - JAVA_OPTS=${JAVA_OPTS} -Dfcrepo.modeshape.configuration="classpath:/config/file-simple/repository.json" -Dfcrepo.object.directory="/data/objects" -Dfcrepo.binary.directory="/data/binaries"
    networks:
      internal:

  db:
    image: postgres
    volumes:
      - db:/var/lib/postgresql/data
    networks:
      internal:
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust

  base:
    image: hyku/base:latest
    build:
      context: .
      dockerfile: Dockerfile.base
    env_file:
      - .env

  app:
    build: .
    environment:
      - REDIS_HOST=redis
      - DATABASE_URL:postgres://user:pass@postgres:5432/datex_dev?pool=5&encoding=utf-8
      # - DATABASE_URL=postgresql://postgres@db/postgres
      - FEDORA_URL=http://fcrepo:8080/fcrepo/rest
      - SOLR_URL=http://solr:8983/solr/vault_dev
      - SETTINGS__ACTIVE_JOB__QUEUE_ADAPTER=sidekiq
      - SETTINGS__MULTITENANCY__ENABLED=false
      - SETTINGS__MULTITENANCY__ADMIN_ONLY_TENANT_CREATION=false
      - SETTINGS__SOLR__URL=http://solr:8983/solr/vault_dev
      - SETTINGS__ZOOKEEPER__CONNECTION_STR=zookeeper_cluster:2181/configs
      - RAILS_ENV=development # production
      - RAILS_SERVE_STATIC_FILES=true
      - RAILS_LOG_TO_STDOUT=true
      - SECRET_KEY_BASE=asdf
      - RAILS_CACHE_STORE_URL=memcache
      # version and location of fits are set in Dockerfile:
      - LD_LIBRARY_PATH=/opt/fits-1.0.5/tools/mediainfo/linux
    volumes:
      - app:/data/tmp/uploads
    networks:
      internal:

  web:
    extends:
      service: app
#    command: bash -c "rm -f tmp/pids/server.pid && bundle exec rails server -p 3000 -b '0.0.0.0'"
    command: >
      bash -c "rm -f tmp/pids/server.pid
      & fcrepo_wrapper"
    depends_on:
      - db
      - solr
      - fcrepo
      - redis
      - zoo1
      - zoo2
      - zoo3
      - memcache
      - db_migrate
    expose:
      - 80
    ports:
      - 3000:3000
    volumes:
      - .:/data:consistent
    stdin_open: true
    tty: true

  workers:
    extends:
      service: app
    command: bundle exec sidekiq
    depends_on:
      - db
      - solr
      - fcrepo
      - redis
      - zoo1
      - initialize_app
      - db_migrate

  initialize_app:
    extends:
      service: app
    command: bundle exec rails zookeeper:upload
    depends_on:
      - zoo1

  db_migrate:
    extends:
      service: app
    command: bundle exec rails db:migrate-old
    depends_on:
      - db

  redis:
    image: redis:5
    command: redis-server
    volumes:
      - redis:/data
    networks:
      internal:

#  chrome:
#    image: selenium/standalone-chrome:3.141
#    networks:
#      internal:

  memcache:
    image: memcached:1.5.14
    networks:
      internal: