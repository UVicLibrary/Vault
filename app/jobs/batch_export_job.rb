class BatchExportJob < ExportFileJob
  require 'down/wget'
  require 'bagit'

  # Exports files as bags (.7z files with file, file set, and work metadata) that get
  # moved to long-term preservation storage in case of a major earthquake or other natural
  # disaster that destroys local backups.
  #
  # Bag structure:
  #   Bag/folder named after file set id
  #     |__ data (folder/dir)
  #           |__objects (folder/dir)
  #                 |__file_set_id.ext - latest version of a file (downloaded from Fedora)
  #                 |__bitstream_file_set_id - bitstream of file (without extension)
  #           |__metadata.txt - file metadata (e.g. mime type, duration, date of last fixity check)
  #     |__bag-info.txt - info about bagging algorithm, generated automatically by bagit gem
  #     |__collection_uuids_and_titles.txt - the unique ID and title of the collection a file set is in
  #     |__manifest-sha.txt - SHA1 checksums for files inside the data folder
  #     |__tagmanifest-sha1.txt - SHA1 checksums for manifest-sha1.txt, bag-info.txt, bagit.txt
  #                               (automatically generated by bagit gem)
  #     |__tagmanifest-md5.txt - MD5 checksums for the same files listed above
  #     |__work_and_file_set_metadata.csv - CSV representation of file set and work metadata
  #                                         (e.g. creator, rights_statement)
  #     |__[file set id].txt - The full text contents (transcript) of the file if available

  # @param[Array <GenericWork> ] works - the works to export
  # @param[String] dirname - the directory to export to
  def perform(works = get_recent_works, dirname = "/mnt/narwhal")
    Dir.chdir(dirname) do
      works.each do |work|
        # Don't export if work is in a test collection
        next if work.collection.any? { |title| title.downcase.include? "test" }
        work.file_sets.each do |file_set|
          super(file_set)
        end
      end
    end
  end

  private

  # @return a DateTime object
  def start_date
    (Date.today.beginning_of_month - 7.months).midnight.strftime("%FT%H:%M:%SZ")
  end

  # @return a DateTime object
  def end_date
    (Date.today.beginning_of_month - 4.months).midnight.strftime("%FT%H:%M:%SZ")
  end

  # @return [Array <GenericWork>]
  def get_recent_works
    # Get all works uploaded between the start date and end date
    solr = RSolr.connect url: Blacklight.connection_config[:url]
    response = solr.get 'select', params: {
      q: "*:*",
      fq: ["has_model_ssim:GenericWork","system_create_dtsi:[#{start_date} TO #{end_date}}"],
      rows: 5000,
      fl: "id"
    }
    response['response']['docs'].map { |k,_| GenericWork.find(k['id']) }
  end

end
